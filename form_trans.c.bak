#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "kmc.h"


int form_trans(int argc,char *argv[],int scansteps,int aminoresnum,float energy_scan2[1000][7][50],int num_list1,float sim_temp,float OMEGA_B[7],int event_or_scan,float expconst,
               int acc, int *acceptor)

{

  int a,i,k,l,p,m;

  char char1[10000][100]; 
  
  char res_type[10000][5],atom_type[10000][5];
  
  int atom_num[10000];
  
  float atom_x[10000],atom_y[10000],atom_z[10000];   

  float box_x,box_y,box_z;
  
  char *trajfile, *ndxfile;
  
  int range_1or2;

  int res_number[10000];
  
  char chari;  
  
  float eigenval2_x,eigenval2_y,eigenval2_z,x;
  
  int num;

  int don,hyd;
  
  int num_hbond2;
   
  FILE *fp;

  int num_event,res_atom_number;
  
  float OMEGA_B_VAL, OMEGA_ZERO_VAL,natoms_f;  
  int res_id2;
  
  float don_x,don_y,don_z,acc_x,acc_y,acc_z;
  
  float D_x2,D_y2,D_z2,D_A2;
  
  float atom_x2[10000],atom_y2[10000],atom_z2[10000];
  
  float scale,scalekey;
  
  float energy_val,scansteps2;

  int int_ex;

  scansteps2 = (float) scansteps;
  
  num_event = 3;

       
for(k=1;k<=scansteps;k++){ 

  if(k==1){
  
  fp = fopen("minimized3.gro","r");
      
      a = 0;
      
      while(fgets(char1[a],sizeof(char1[a]),fp) != NULL){
	
	a ++;
	
      };
      
 //     atom_x = malloc(a*sizeof(float));
 //     atom_y = malloc(a*sizeof(float));
 //     atom_z = malloc(a*sizeof(float));
 //   res_number = malloc(a*sizeof(int));
 //     atom_num   = malloc(a*sizeof(int));
  //    res_type = malloc(1000);
  //    atom_type = malloc(1000);
            
      for(i=2;i<=a;i++){
    
	
        if(i<=a-2)  { 
	    sscanf(char1[i],"%d%s%s%d%f%f%f",&res_number[i],&res_type[i],&atom_type[i],&atom_num[i],&atom_x[i],&atom_y[i],&atom_z[i]);
//            printf("%5d%5s%5s%5d%8.3f%8.3f%8.3f\n",res_number[i],res_type[i],atom_type[i],atom_num[i],atom_x[i],atom_y[i],atom_z[i]);
	};
	    
//	if(i==a-1)  {

//	            sscanf(char1[i],"%f%f%f%s[^\n]",&box_x,&box_y,&box_z,&chari);
	//            printf("%f%f%f\n",box_x,box_y,box_z);
//      };
 	
      };   

  fclose(fp);

  };
  
  if(k>=2){

          fp = fopen("minimized.gro","r");
      
          a = 0;
      
          while(fgets(char1[a],sizeof(char1[a]),fp) != NULL){
	
        	a ++;
	
          };
            
          for(i=2;i<=a;i++){
    
	
           if(i<=a-2)  sscanf(char1[i],"%d%s%s%d%f%f%f",&res_number[i],&res_type[i],&atom_type[i],&atom_num[i],&atom_x[i],&atom_y[i],&atom_z[i]);
           if(i==a-1)  {

	            sscanf(char1[i],"%f%f%f%s[^\n]",&box_x,&box_y,&box_z,&chari);
	//            printf("%f%f%f\n",box_x,box_y,box_z);
           };
 	
         };   

         fclose(fp);
    
    
  };
  
  fp = fopen("2.ndx","w");
  
  
      fprintf(fp,"%s\n","[ 1 ]");  
      fprintf(fp,"%s\n","[ group ]");
  
      for(i=2;i<=a-2;i++){

	if(res_number[i] == aminoresnum) {
	  
	   fprintf(fp,"%d\n",atom_num[i]);
	  
	};
	
      };
      
      fprintf(fp,"%s\n","[ protein ]");
      
      for(i=2;i<=a-2;i++){
	
	if(res_number[i] != aminoresnum) {
	  
	   fprintf(fp,"%d\n",atom_num[i]);
	  
	};
	
      };
            
      fprintf(fp,"%s\n","[ system ]");
      
      for(i=2;i<=a-2;i++){
	 
	   fprintf(fp,"%d\n",atom_num[i]);
	  
       };
      
      fclose(fp);
      
      trajfile = "md_traj";
      
      ndxfile  = "2";
      
      range_1or2 = 1;
     
     range_1or2 = 2;
     
     if(k == 1) {
     
//     gmx_hbond3(argc,argv,range_1or2,trajfile,ndxfile,&don,&hyd,&acc,&num_hbond2);     
  
       don = 1;
       acc = 1;
  
     };
     
     m = 1;
     
       for(i=2;i<=a-2;i++){

	if(atom_num[i] == don){
	  
	  don_x = atom_x[i];
	  don_y = atom_y[i];
	  don_z = atom_z[i];
	  
	};
	
	if(atom_num[i] == acc){
	  
	  acc_x = atom_x[i];
	  acc_y = atom_y[i];
	  acc_z = atom_z[i];
	  
	};	
		
      };
      
      D_x2 = acc_x - don_x;
      D_y2 = acc_y - don_y;
      D_z2 = acc_z - don_z;
      
      D_A2 = sqrt(pow(D_x2,2)+pow(D_y2,2)+pow(D_z2,2));
      
      expconst = 0.3 - D_A2;
      
      scalekey = - expconst/(scansteps*D_A2);    
     
     if(don == 1 && acc == 1){
       
      for(i=2;i<=a-2;i++){       

	if(res_number[i] == aminoresnum && m ==1 ){
	  
          random_number(&x);

          num = roundf(x*5);

	  don = atom_num[i+num-1];
	  hyd = atom_num[i+num];
	      
	  natoms_f = (float) atom_num[a-2];
	      
	  random_number(&x);
	  
	  if(event_or_scan == 0){
	  
             random_number(&x);

             num = roundf(x*5);

	     acc = atom_num[i+num*2];

             if(acc >= natoms_f) {

                acc = atom_num[i-num*2]; 

                }; 
	  
	  };
	  
	  if(acc == 0)    acc = 1;
	  if(don == 1 && acc == 1)    acc = atom_num[a-2];
	      
	  scalekey = - expconst /(scansteps);
	  
	      m++;
       
       
	};
	
      };
      
     }	  
	
	
     *acceptor = acc;
     
//      scalekey = 0.0011;
  
      printf("%f\n",scalekey);
             
      fp = fopen("2.ndx","w");
      
      fprintf(fp,"%s\n","[ group ]");
      
      fprintf(fp,"%d\n%d\n%d\n",don,hyd,acc);
  
//      for(i=2;i<=a-2;i++) {
	
//	  if(res_number[i] == aminoresnum) fprintf(fp,"%d\n",atom_num[i]);
	
//      };      
      
      fprintf(fp,"%s\n","[ protein ]");
      
      for(i=2;i<=a-2;i++) {
	
	  fprintf(fp,"%d\n",atom_num[i]);
	
      };
      
       fprintf(fp,"%s\n","[ system ]");
      
      for(i=2;i<=a-2;i++) {
	
	  fprintf(fp,"%d\n",atom_num[i]);
	
      };     
    
      fclose(fp);
      res_atom_number = p-1;
      
      scale = 0;      

           for(i=2;i<=a-2;i++) {
	
        	if(atom_num[i] == don) res_id2 = res_number[i];
	
            };
      
            p = 1;
      
            for(i=2;i<=a-2;i++) {
	 
           	if(res_number[i] == res_id2) {
	  
	  
	           atom_x2[p] = scale*scalekey*(don_x - acc_x)+atom_x[i];
	           atom_y2[p] = scale*scalekey*(don_y - acc_y)+atom_y[i];
	           atom_z2[p] = scale*scalekey*(don_z - acc_z)+atom_z[i];	  
	  
		   p++;
		   
		};   
		   
	  };
	  
	  
          res_atom_number = p-1;
	  
	
	scale = scale + 1/scansteps2;
	
        m = 1;           
           
          for(i=1;i<=a-2;i++){
	    
	    if(res_number[i] == res_id2 && m==1) {
	      
	       for(p=1;p<=res_atom_number;p++){
		
		 atom_x[i+p-1] = atom_x2[p];
		 atom_y[i+p-1] = atom_y2[p];
		 atom_z[i+p-1] = atom_z2[p];
		 
		 m++;
		 
	      };
	      
	    };
	    
	  }; 

	  
	  fp = fopen("minimized.gro","w");
	  
	  fprintf(fp,"%s\n","");
	  fprintf(fp,"%d\n", a - 3);
  
	  for(i=2;i<=a-2;i++){
	    
	    fprintf(fp,"%5d%5s%5s%5d%8.3f%8.3f%8.3f\n",res_number[i],res_type[i],atom_type[i],atom_num[i],atom_x[i],atom_y[i],atom_z[i]);

	  };
	  
	  fprintf(fp,"%s",char1[a-1]);
	  
	  fclose(fp);
	  
	  printf("%f\n",sim_temp);
	  
	  	  
	  i = energy_shift(argc,argv,&energy_val,sim_temp,int_ex);


          if(int_ex == 1) return 0;
	  
          energy_scan2[num_list1][num_event][k] = energy_val;          

	  
      };

      
  	fp = fopen("1.ndx","w");
	
	fprintf(fp,"%s\n","[ group ]");
	
	for(m=2;m<=a-2;m++){
	  
//	  if(res_number[m] == aminoresnum) {
	    
	    fprintf(fp,"%d\n",atom_num[m]);

//	  };
	  
	};
	
	fclose(fp);

    if(event_or_scan == 0){ 
	
    i = kramer_search(argc,argv,&OMEGA_B_VAL,sim_temp,aminoresnum);

    };
    
    OMEGA_B[num_event] = OMEGA_B_VAL;


  
}
